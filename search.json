[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fastbet",
    "section": "",
    "text": "from IPython.display import HTML\n\nimport pandas as pd\n\nfrom fastbet.config.mongo import mongo_init\nfrom fastbet.datastructure.data_extractor import data_aggregator\nfrom fastbet.environment import BettingEnv"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "fastbet",
    "section": "Install",
    "text": "Install\npip install fastbet"
  },
  {
    "objectID": "index.html#config",
    "href": "index.html#config",
    "title": "fastbet",
    "section": "Config",
    "text": "Config\nIn order to connect to the mongo database we require some connection parameters defined in toml format and should be read when the library is loaded. The package will look first under /secrets/config.toml or in the environment variable BETTING_ENV_CONFIG. An example of config file is provided with the package and will be used by default. It is the user’s responsibility to make sure this file is saved at the right location if you want to use your own.\nLet’s start by registering the connection to the mongo database:\n\nmongo_init(db_host=\"public_atlas\")"
  },
  {
    "objectID": "index.html#simplified-betting-environment",
    "href": "index.html#simplified-betting-environment",
    "title": "fastbet",
    "section": "Simplified betting environment",
    "text": "Simplified betting environment\nThe punter starts with $N (N>0) in his Bank account and can use them to place bets on several football games.\nHe is offered the option to bet on the 3 main markets: 1X2 (home/draw/away), Asian handicap and Total(Over/Under) (we focus on the even line) and is only allowed to place a small, medium, or big stake on one and only one of the 7 possible selections home team win, away team win, or draw (1X2 case) or home or away (Asian handicap and Total) or skip the betting opportunity. At each step, the punter is presented with some information about a game and the associated betting opportunities. If he decides to bet, he receives a reward that could be positive (profit) or negative (loss of his stake). His balance is then updated accordingly and he moves to the next step i.e next game. An episode ends when the punter goes bankrupt (Balance <= 0) or if no more betting opportunities are available.\n\nLoad games\n\nfixtures = data_aggregator(limit=10)\n\n\n\nInit environment\n\nenv = BettingEnv(fixtures)\nmax_steps_limit = fixtures.shape[0]\n\n\n\nPlaying random choices\n\n# Init RL env.\nenv.reset()\n\n# Init done Flag to False.\ndone = False\n# Init loop counter.\ni = 0\n# Stops when it is done or when we have bet on all provided games.\nwhile not done and i < max_steps_limit:\n    # Make a step.\n    obs, reward, done, info = env.step(env.action_space.sample())\n    # Increment counter.\n    i = i + 1\n\n\n\n\n\n\n\n\nPlaying Medium Stake on Home Team Win (1X2)\n\n# Init RL env.\nenv.reset()\n# Init done Flag to False.\ndone = False\n# Init loop counter.\ni = 0\n# Stops when it is done or when we have bet on all provided games.\nwhile not done and i < max_steps_limit:\n    # Make a step.\n    obs, reward, done, info = env.step(2)\n    # Increment counter.\n    i = i + 1"
  },
  {
    "objectID": "Config/mongo.html",
    "href": "Config/mongo.html",
    "title": "Mongo",
    "section": "",
    "text": "from IPython.core.debugger import set_trace\n\n\nsource\n\ndb_connect\n\n db_connect (db_hosts:Dict, config:Dict, db_host:str, db_name:str,\n             db_alias:Optional[str]=None)\n\nConnect to the apprpriate mongo database.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndb_hosts\ntyping.Dict\n\nAll DB hosts.\n\n\nconfig\ntyping.Dict\n\nDatabase config.\n\n\ndb_host\nstr\n\nHost name as defined in DB_HOSTS.\n\n\ndb_name\nstr\n\nName of the database to connect to.\n\n\ndb_alias\ntyping.Optional[str]\nNone\n\n\n\n\nHere we register the connection to the database where the Fixtures info are saved. It will be used later to extract the game information needed to our RL environment.\n\ndb_connect(\n    db_hosts=DB_HOSTS,\n    config=CONFIG,\n    db_host=\"public_atlas\",\n    db_name=CONFIG[\"connections\"][\"features\"][\"db\"],\n    db_alias=\"features\",\n)\n\nWe will need a function to set-up all the mongoDB connections. It should be called when the package is initialised:\n\nsource\n\n\nmongo_init\n\n mongo_init (db_host:str, db_hosts:Dict={'public_atlas', 'prod_atlas',\n             'prod_backup'}, config:Dict={'title': 'Python Config',\n             'googleCloud': {'json_config': '{\"type\":\n             \"service_account\",\"project_id\": \"flash-\n             sol-278111\",\"private_key_id\":\n             \"e7821167ad920997771e1e41a639d231538622f9\",\"private_key\": \"\n             -----BEGIN PRIVATE KEY-----\\\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAAS\n             CBKcwggSjAgEAAoIBAQC6f5PIdDR0zKVh\\\\ncGU2u5urvk+uYv/dCccfWtk0m\n             leyKYiKC0zVVULrJ+qQHgQEvl4Kd89p6JsOERQM\\\\nr312WE1sHO4MkCUDxtS\n             q/4wYQgHJYsx98+6zfHQR0W8IX51gJJrxefwCaMbKq4ll\\\\n+p7jxtaJ0wKyG\n             sFmfmbbcttz/24qoD7nAno0yRAhk8oFPtnCiF/FKrHkdEML59v4\\\\ngq/Qn77\n             3ctKANNTInFOekG7/kOkNWzTYNW3mn4p/qi0SG1RVx85+Y1eqdVETjJWs\\\\n0\n             PRffQE2QZO8kmun1Zyr5pX5XO9bWndDNMD1HHkla5WIrdbIB9Ra2zdve+WLtC\n             dh\\\\nwHd56Ic7AgMBAAECggEAPTPOyLKx4D6ka0SaQorwvDy5I25jryMdUIHc\n             0/FupA4T\\\\nO9IXhc70Jf20cVUYVoIulFrbG1N1Rvl9zeftUWALEFayHDdVnl\n             aqxe8VB4Tp1y/w\\\\nEclyZT6LTKmhOWs/VyTMIEC63gOKcUo3zdqgN/mxwAsa\n             UF6NZ1hF4vBfakLB4YSi\\\\noULfs6EXDf24l6HooeTMXhKqtBp2gI4Y/RxDQq\n             2hApaym4v9qwiUmfbbiDkSaEuJ\\\\n+KDE03TlbAkYtv9U/WeLM81MHbKYAmcT\n             5X8qpckSb4mu3RXwFG9IwJFQG2+i1xMq\\\\noWdSBZiltVnIqUe3BQ5RJmGCwq\n             lnZMmoj+Bv2zQUoQKBgQD1PzBcPju/rR9jaF2B\\\\nrk+1F6bx8VUAYVdzKurW\n             NrdIHiro7PuqcWJ3SL/i8PrD2jgMQxhBfqy6OHMUzzQo\\\\n/oj7AbW5qs6K30\n             6k6eiyyOpJsi0ZHTtPJ25y++Id5QnD3ggptKfDBTZ88uchQFXY\\\\nXfqHwUUn\n             fxXk0wmX7i07U8c1sQKBgQDCrPT4Qo5IPaTBlYGasOuplZCw7kN/hs/b\\\\nvK\n             n5WPRDkU5rysekmOFsy/KMYJ2Qul5+CGkWBolsyvnzljZWRDrU0/Uq7nFqhsP\n             e\\\\n4EV90YVGj2X/oWPVcpE22qpdz+7GnTvPQhX3v5yHCP5XgxS/5uM+PIsuX\n             4wy/234\\\\nKygcN5rKqwKBgFa4P1t+zhXbG8xE7Tub7ad1c5z93zbBNPEObff\n             NZUXlFPtEQUFl\\\\n0pGnceLHn4R9t2/ukbcnGeDHcTocgq80Qi+vzRiYI2zLx\n             b1e0N/XV7EzherpgT1e\\\\nDhouoyg7Axb1fiFxNhkp0LiiE8SYQUK/CIXUe6W\n             ZtJ4zWaMVn3zpBPohAoGAT7o1\\\\nuVbInp1gVEe+hHPgj9tJHqz1x8yWZA+oL\n             Q5ZOzLPQyYRDT/vUndUJlmLLjKlcEhR\\\\ngUu8DGo0Y6YpKrtWvMLxrVtp546\n             5uRVwYE7mnjcsNr0J/eilwCldjH4T9BOA4yjV\\\\nhlla6ZKtV3m/jbgpaNuyx\n             JMs/9XMW86Q5r1/D3ECgYEAj2GHnHiq/bhmpPdIMQk9\\\\nK4oyvnKDEVU8GFc\n             w2DShoHFKhnNEo/3geWYEWj2/DobGWitcU9ynsskBK/sztOOk\\\\nl5w/4Xwq1\n             rJKz3uavNj5649azPP0NT2dWoigYyw/JCyzliq4fhkJmvFf9TvMuepQ\\\\nLTa\n             9QeuVXDAyhU9igzFImi4=\\\\n-----END PRIVATE\n             KEY-----\\\\n\",\"client_email\": \"googlecloudrunner@flash-\n             sol-278111.iam.gserviceaccount.com\",\"client_id\":\n             \"102035891181696222552\",\"auth_uri\":\n             \"https://accounts.google.com/o/oauth2/auth\",\"token_uri\": \"htt\n             ps://oauth2.googleapis.com/token\",\"auth_provider_x509_cert_ur\n             l\": \"https://www.googleapis.com/oauth2/v1/certs\",\"client_x509\n             _cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x50\n             9/googlecloudrunner%40flash-\n             sol-278111.iam.gserviceaccount.com\"}', 'buckets':\n             {'tracking': 'ra_tracking'}}, 'sportLogic': {'username':\n             'tarak@realanalytics.co.uk', 'password':\n             'GBwoaYMrrNGoijrD2@aYFYNq'}, 'databases': {'prod_backup':\n             {'password': 'Ka7loucha', 'port': 27017, 'url':\n             '51.75.163.92', 'user': 'tarak', 'authSource': 'admin',\n             'mongo_base': 'mongodb://', 'retry_writes': '', 'majority':\n             ''}, 'prod_atlas': {'password': 'Ka7loucha', 'port': '',\n             'url': 'production-data.04bbr.mongodb.net', 'user': 'tarak',\n             'authSource': 'admin', 'connection_delay': '', 'mongo_base':\n             'mongodb+srv://', 'retry_writes': True, 'majority': True},\n             'public_atlas': {'password': 'DgYu5U9OhRATmkQ7', 'port': '',\n             'url': 'cluster0.ierf2gk.mongodb.net', 'user': 'user',\n             'authSource': 'admin', 'connection_delay': '', 'mongo_base':\n             'mongodb+srv://', 'retry_writes': True, 'majority': True}},\n             'connections': {'features': {'db': 'Features', 'lineups':\n             'lineups', 'team_features': 'teamFeatures_test',\n             'game_features': 'gameFeatures_test', 'squad_features':\n             'teamSquadFeatures', 'score': 'ScoreTable', 'odds': 'odds',\n             'predictions': 'predictions'}, 'playerattributes': {'db':\n             'playerAttributes', 'competitions': 'Competitions',\n             'fixtures': 'Fixtures', 'teams': 'Teams', 'pl_adaptability':\n             'playerAdaptability', 'pl_attributes': 'playerAttributes',\n             'pl_performance': 'playerExpectedPerformance', 'pl_lastgame':\n             'playerLastGame', 'pl_main_ratings': 'playerMainRatings',\n             'pl_metadata': 'playerMetadata', 'pl_potential':\n             'playerPredictedPotential', 'pl_stats': 'playerStats',\n             'pl_ranks': 'referenceRankQuantile'}, 'whoscored': {'db':\n             'WhoScored', 'fixtures': 'Fixtures', 'lineups': 'Lineups',\n             'game_events': 'GameEvents', 'events': 'Events',\n             'player_index': 'playerIndex', 'team_squad':\n             'AvailableSquad', 'players': 'Players'}, 'oddsportal': {'db':\n             'oddsportal', 'fixtures': 'Fixtures', 'competitions':\n             'Competitions', 'odds': 'odds'}, 'oddsportal_prod_backup':\n             {'db': 'oddsportal', 'fixtures': 'Fixtures', 'competitions':\n             'Competitions', 'liveodds': 'liveodds'}, 'mapping': {'db':\n             'mapping', 'games': 'gamesAlias', 'teams': 'teamsAlias',\n             'competitions': 'competitionsAlias', 'countries':\n             'countriesAlias', 'players': 'playersAlias', 'positions':\n             'positionsAlias', 'formations': 'formationsAlias', 'bookies':\n             'bookiesAlias'}, 'inStat': {'db': 'inStat', 'events':\n             'Events', 'gameEvent': 'GameEvents', 'rawEvents':\n             'rawEvents', 'possessions': 'Possessions', 'possessionMeta':\n             'Training', 'actionValues': 'actionValues'}, 'opta': {'db':\n             'opta', 'events': 'Events', 'gameEvent': 'GameEvents',\n             'possessions': 'Possessions', 'possessionMeta': 'Training',\n             'actionValues': 'actionValues'}, 'skillCorner': {'db':\n             'SkillCorner', 'fixture': 'Fixture'}},\n             'match_prediction_endpoints': {'url':\n             'https://mm.wallbet.it/providers/real-analytics/messages',\n             'username': 'real-analytics', 'password':\n             'f0eedf8b-7557-47b3-877b-98763fd2cd72', 'type': 'base64'},\n             'slack_url': {'slack_webhook': 'https://hooks.slack.com/servi\n             ces/T02A0ETJKL2/B02R181HTQT/591fmllgbp6iuU7o10FUF3vm'},\n             'wandb': {'api_key':\n             'c52236fe07a9817540a02f80cb39b38c2a3030e7', 'username':\n             'tkharrat'}}, db_alias:str='features')\n\nRegister all the required mongo connections.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndb_host\nstr\n\nHost name as defined in DB_HOSTS.\n\n\ndb_hosts\ntyping.Dict\n{‘public_atlas’, ‘prod_atlas’, ‘prod_backup’}\nAll DB hosts.\n\n\nconfig\ntyping.Dict\n{‘title’: ‘Python Config’, ‘googleCloud’: {‘json_config’: ‘{“type”: “service_account”,“project_id”: “flash-sol-278111”,“private_key_id”: “e7821167ad920997771e1e41a639d231538622f9”,“private_key”: “—–BEGIN PRIVATE KEY—–\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC6f5PIdDR0zKVh\\ncGU2u5urvk+uYv/dCccfWtk0mleyKYiKC0zVVULrJ+qQHgQEvl4Kd89p6JsOERQM\\nr312WE1sHO4MkCUDxtSq/4wYQgHJYsx98+6zfHQR0W8IX51gJJrxefwCaMbKq4ll\\n+p7jxtaJ0wKyGsFmfmbbcttz/24qoD7nAno0yRAhk8oFPtnCiF/FKrHkdEML59v4\\ngq/Qn773ctKANNTInFOekG7/kOkNWzTYNW3mn4p/qi0SG1RVx85+Y1eqdVETjJWs\\n0PRffQE2QZO8kmun1Zyr5pX5XO9bWndDNMD1HHkla5WIrdbIB9Ra2zdve+WLtCdh\\nwHd56Ic7AgMBAAECggEAPTPOyLKx4D6ka0SaQorwvDy5I25jryMdUIHc0/FupA4T\\nO9IXhc70Jf20cVUYVoIulFrbG1N1Rvl9zeftUWALEFayHDdVnlaqxe8VB4Tp1y/w\\nEclyZT6LTKmhOWs/VyTMIEC63gOKcUo3zdqgN/mxwAsaUF6NZ1hF4vBfakLB4YSi\\noULfs6EXDf24l6HooeTMXhKqtBp2gI4Y/RxDQq2hApaym4v9qwiUmfbbiDkSaEuJ\\n+KDE03TlbAkYtv9U/WeLM81MHbKYAmcT5X8qpckSb4mu3RXwFG9IwJFQG2+i1xMq\\noWdSBZiltVnIqUe3BQ5RJmGCwqlnZMmoj+Bv2zQUoQKBgQD1PzBcPju/rR9jaF2B\\nrk+1F6bx8VUAYVdzKurWNrdIHiro7PuqcWJ3SL/i8PrD2jgMQxhBfqy6OHMUzzQo\\n/oj7AbW5qs6K306k6eiyyOpJsi0ZHTtPJ25y++Id5QnD3ggptKfDBTZ88uchQFXY\\nXfqHwUUnfxXk0wmX7i07U8c1sQKBgQDCrPT4Qo5IPaTBlYGasOuplZCw7kN/hs/b\\nvKn5WPRDkU5rysekmOFsy/KMYJ2Qul5+CGkWBolsyvnzljZWRDrU0/Uq7nFqhsPe\\n4EV90YVGj2X/oWPVcpE22qpdz+7GnTvPQhX3v5yHCP5XgxS/5uM+PIsuX4wy/234\\nKygcN5rKqwKBgFa4P1t+zhXbG8xE7Tub7ad1c5z93zbBNPEObffNZUXlFPtEQUFl\\n0pGnceLHn4R9t2/ukbcnGeDHcTocgq80Qi+vzRiYI2zLxb1e0N/XV7EzherpgT1e\\nDhouoyg7Axb1fiFxNhkp0LiiE8SYQUK/CIXUe6WZtJ4zWaMVn3zpBPohAoGAT7o1\\nuVbInp1gVEe+hHPgj9tJHqz1x8yWZA+oLQ5ZOzLPQyYRDT/vUndUJlmLLjKlcEhR\\ngUu8DGo0Y6YpKrtWvMLxrVtp5465uRVwYE7mnjcsNr0J/eilwCldjH4T9BOA4yjV\\nhlla6ZKtV3m/jbgpaNuyxJMs/9XMW86Q5r1/D3ECgYEAj2GHnHiq/bhmpPdIMQk9\\nK4oyvnKDEVU8GFcw2DShoHFKhnNEo/3geWYEWj2/DobGWitcU9ynsskBK/sztOOk\\nl5w/4Xwq1rJKz3uavNj5649azPP0NT2dWoigYyw/JCyzliq4fhkJmvFf9TvMuepQ\\nLTa9QeuVXDAyhU9igzFImi4=\\n—–END PRIVATE KEY—–\\n”,“client_email”: “googlecloudrunner@flash-sol-278111.iam.gserviceaccount.com”,“client_id”: “102035891181696222552”,“auth_uri”: “https://accounts.google.com/o/oauth2/auth”,“token_uri”: “https://oauth2.googleapis.com/token”,“auth_provider_x509_cert_url”: “https://www.googleapis.com/oauth2/v1/certs”,“client_x509_cert_url”: “https://www.googleapis.com/robot/v1/metadata/x509/googlecloudrunner%40flash-sol-278111.iam.gserviceaccount.com”}’, ‘buckets’: {‘tracking’: ‘ra_tracking’}}, ‘sportLogic’: {‘username’: ‘tarak@realanalytics.co.uk’, ‘password’: ‘GBwoaYMrrNGoijrD2@aYFYNq’}, ‘databases’: {‘prod_backup’: {‘password’: ‘Ka7loucha’, ‘port’: 27017, ‘url’: ‘51.75.163.92’, ‘user’: ‘tarak’, ‘authSource’: ‘admin’, ‘mongo_base’: ‘mongodb://’, ‘retry_writes’: ’‘, ’majority’: ’‘}, ’prod_atlas’: {‘password’: ‘Ka7loucha’, ‘port’: ’‘, ’url’: ‘production-data.04bbr.mongodb.net’, ‘user’: ‘tarak’, ‘authSource’: ‘admin’, ‘connection_delay’: ’‘, ’mongo_base’: ‘mongodb+srv://’, ‘retry_writes’: True, ‘majority’: True}, ‘public_atlas’: {‘password’: ‘DgYu5U9OhRATmkQ7’, ‘port’: ’‘, ’url’: ‘cluster0.ierf2gk.mongodb.net’, ‘user’: ‘user’, ‘authSource’: ‘admin’, ‘connection_delay’: ’‘, ’mongo_base’: ‘mongodb+srv://’, ‘retry_writes’: True, ‘majority’: True}}, ‘connections’: {‘features’: {‘db’: ‘Features’, ‘lineups’: ‘lineups’, ‘team_features’: ‘teamFeatures_test’, ‘game_features’: ‘gameFeatures_test’, ‘squad_features’: ‘teamSquadFeatures’, ‘score’: ‘ScoreTable’, ‘odds’: ‘odds’, ‘predictions’: ‘predictions’}, ‘playerattributes’: {‘db’: ‘playerAttributes’, ‘competitions’: ‘Competitions’, ‘fixtures’: ‘Fixtures’, ‘teams’: ‘Teams’, ‘pl_adaptability’: ‘playerAdaptability’, ‘pl_attributes’: ‘playerAttributes’, ‘pl_performance’: ‘playerExpectedPerformance’, ‘pl_lastgame’: ‘playerLastGame’, ‘pl_main_ratings’: ‘playerMainRatings’, ‘pl_metadata’: ‘playerMetadata’, ‘pl_potential’: ‘playerPredictedPotential’, ‘pl_stats’: ‘playerStats’, ‘pl_ranks’: ‘referenceRankQuantile’}, ‘whoscored’: {‘db’: ‘WhoScored’, ‘fixtures’: ‘Fixtures’, ‘lineups’: ‘Lineups’, ‘game_events’: ‘GameEvents’, ‘events’: ‘Events’, ‘player_index’: ‘playerIndex’, ‘team_squad’: ‘AvailableSquad’, ‘players’: ‘Players’}, ‘oddsportal’: {‘db’: ‘oddsportal’, ‘fixtures’: ‘Fixtures’, ‘competitions’: ‘Competitions’, ‘odds’: ‘odds’}, ‘oddsportal_prod_backup’: {‘db’: ‘oddsportal’, ‘fixtures’: ‘Fixtures’, ‘competitions’: ‘Competitions’, ‘liveodds’: ‘liveodds’}, ‘mapping’: {‘db’: ‘mapping’, ‘games’: ‘gamesAlias’, ‘teams’: ‘teamsAlias’, ‘competitions’: ‘competitionsAlias’, ‘countries’: ‘countriesAlias’, ‘players’: ‘playersAlias’, ‘positions’: ‘positionsAlias’, ‘formations’: ‘formationsAlias’, ‘bookies’: ‘bookiesAlias’}, ‘inStat’: {‘db’: ‘inStat’, ‘events’: ‘Events’, ‘gameEvent’: ‘GameEvents’, ‘rawEvents’: ‘rawEvents’, ‘possessions’: ‘Possessions’, ‘possessionMeta’: ‘Training’, ‘actionValues’: ‘actionValues’}, ‘opta’: {‘db’: ‘opta’, ‘events’: ‘Events’, ‘gameEvent’: ‘GameEvents’, ‘possessions’: ‘Possessions’, ‘possessionMeta’: ‘Training’, ‘actionValues’: ‘actionValues’}, ‘skillCorner’: {‘db’: ‘SkillCorner’, ‘fixture’: ‘Fixture’}}, ‘match_prediction_endpoints’: {‘url’: ‘https://mm.wallbet.it/providers/real-analytics/messages’, ‘username’: ‘real-analytics’, ‘password’: ‘f0eedf8b-7557-47b3-877b-98763fd2cd72’, ‘type’: ‘base64’}, ‘slack_url’: {‘slack_webhook’: ‘https://hooks.slack.com/services/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’}, ‘wandb’: {‘api_key’: ‘c52236fe07a9817540a02f80cb39b38c2a3030e7’, ‘username’: ‘tkharrat’}}\nDatabase config.\n\n\ndb_alias\nstr\nfeatures\ndb-alias\n\n\n\n\nmongo_init(\"public_atlas\")"
  },
  {
    "objectID": "Config/config.html",
    "href": "Config/config.html",
    "title": "Config",
    "section": "",
    "text": "from IPython.core.debugger import set_trace\n\n\nLoad Config\nThe configuration file for this project is defined in toml format and should be loaded when the library is loaded. The package will look first under /secrets/config.toml or in the environment variable BETTING_ENV_CONFIG. An example of config file is provided with the package and will be used by default. It is the user’s responsibility to make sure this file is saved at the right location."
  },
  {
    "objectID": "Utils/pnl_calculator.html",
    "href": "Utils/pnl_calculator.html",
    "title": "1X2, Asian Handicap and Total Goal Profit",
    "section": "",
    "text": "Using the config.toml credentials included in the main repository, we must first load games data stored in our MongoDb Cluster before testing our betting environment."
  },
  {
    "objectID": "Utils/pnl_calculator.html#popular-betting-markets",
    "href": "Utils/pnl_calculator.html#popular-betting-markets",
    "title": "1X2, Asian Handicap and Total Goal Profit",
    "section": "Popular betting markets",
    "text": "Popular betting markets\nThere are many types of bets available in football today but betting on the match outcome, known as the 1x2 market, is the most popular one by far. The punter can bet the 3 possible match outcomes: Home-win, draw or away-win.\nA second popular market, in particular in Asia, is known as Asian handicap and is directly linked to the game goal difference. It offers only 2 betting options known as home (1) or away (2) and assumes that one of the team will start with a handicap (known as the line) and the other with an advantage. There are 3 types of Asian handicap markets:\n\nInteger Lines: if the handicap chosen is equal to the score difference, it can result in a bet being returned (fold or push).\nHalf Lines: the outcome of the wager is either a win or a loss.\nQuarter Lines: Divide your wager equally between the two AH lines above and beyond. For instance, a handicap of -0.75 is really two handicaps for the price of one, with half of your bet being made at -0.5 and the other half at -1, both of which are given the same odds. In this case, we have a win, half-win, half-loss, or a loss.\n\nAnother popular market is known as total goals where the punter can bet on the total number of goals in a game being over or under a given number (known as the line). Similar to the Asian handicap market, 3 type of lines are available and the punter can end up with a win, half-win, money returned, half stake loss or total loss."
  },
  {
    "objectID": "Utils/pnl_calculator.html#pnl-computation",
    "href": "Utils/pnl_calculator.html#pnl-computation",
    "title": "1X2, Asian Handicap and Total Goal Profit",
    "section": "PnL computation",
    "text": "PnL computation\n\n1X2 market\nThe PnL of the 1x2 market depends on the match outcome (home-win/draw/away-win) and is binary: the punter can either make a profit and get his stake returned or loose his stake.\n\\[ profit_{1X2} =  Stake *(Odds \\times -1)\\] With:\n\nStake : Invested money\nOdds : 1X2 European/decimal betting odds (> 1)\n\n\nsource\n\n\npnl_1X2\n\n pnl_1X2 (selection:numpy.ndarray, outcome:numpy.ndarray,\n          odds:numpy.ndarray)\n\nReturns the 1X2 PnL.\n\n\n\n\nType\nDetails\n\n\n\n\nselection\nndarray\nThe amount invested on each selection.\n\n\noutcome\nndarray\nGame result (Binary side outcome), shape=(1,7).\n\n\nodds\nndarray\nOdds for the current game, shape=(1,7).\n\n\nReturns\nndarray\n1X2 PnL.\n\n\n\n\n# Bet action (here, our action is betting 20% of our balance on away team).\nselection = (\n    np.array(\n        [\n            [0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0],\n            [0.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0],\n            [0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n        ]\n    )\n    * 100.0\n)\n\ninfo = fixture.head(3)\n\n# Game odds.\nodds = info[\n    [\n        \"preGameOdds1\",\n        \"preGameOddsX\",\n        \"preGameOdds2\",\n        \"preGameAhHome\",\n        \"preGameAhAway\",\n        \"preGameOver\",\n        \"preGameUnder\",\n    ]\n].values\n\n# Game result index(homewin -> 0 , draw -> 1, awaywin -> 2).\ngame_result = info[\"tgt_outcome\"].values.astype(int)\nbinary_result = np.zeros_like(selection)\nnp.put_along_axis(binary_result, np.expand_dims(game_result, axis=1), 1, axis=1)\n\npnl_1X2(selection, binary_result, odds)\n\narray([[-20.],\n       [-70.],\n       [-80.]])\n\n\n\n\nAsian markets\nThe PnL for the Asian market is more complicated. It is related to the game goal-difference/ total goals and the actual handicap line. It can result, as we described above, in 5 outcomes: win/half-win/fold/half-loss/loss.\n\\[ profit_{AH} = \\begin{cases}\n     0.0 & \\text{If outcome + line = 0} \\\\\\\\\n     \\frac{odds -1}{2}& \\text{If outcome + line = 0.25}\\\\\\\\\n     odds -1 & \\text{If outcome + line >= 0.5} \\\\\\\\\n     -0.5 & \\text{If outcome + line = -0.25} \\\\\\\\\n     -1.0 & \\text{If outcome + line <= -0.5} \\end{cases} \\]\nWith:\n\noutcome : game goal difference or total goals\nline: Asian handicap line\nOdds : Asian odds\n\n\nAsian handicap market\n\nsource\n\n\n\npnl_ah\n\n pnl_ah (selection:numpy.ndarray, odds:numpy.ndarray,\n         obs_gd:numpy.ndarray, ah_line:numpy.ndarray)\n\nReturns the Asian Handicap PnL\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nselection\nndarray\nThe amount invested on each selection; shape n x 7; 4th and 5th index are asian handicap\n\n\nodds\nndarray\nmarket odds in 1|X|2|A1|A2|O|U order; shape n x 7\n\n\nobs_gd\nndarray\nGame goal-difference; shape (n,)\n\n\nah_line\nndarray\nAsian line could be integer, half or quarter line; shape (n,)\n\n\nReturns\nndarray\nAsian Handicap PnL.\n\n\n\n\nselection = (\n    np.array(\n        [\n            [0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0],\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            [0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0],\n        ]\n    )\n    * 100.0\n)\n\ninfo = fixture.head(3)\n\n# Game odds.\nodds = info[\n    [\n        \"preGameOdds1\",\n        \"preGameOddsX\",\n        \"preGameOdds2\",\n        \"preGameAhHome\",\n        \"preGameAhAway\",\n        \"preGameOver\",\n        \"preGameUnder\",\n    ]\n].values\n\nobs_gd = info.tgt_gd.values\nah_line = info.preGameAhLineId.values\n\n\npnl_ah(selection, odds, obs_gd, ah_line)\n\narray([[-50.],\n       [  0.],\n       [-20.]])\n\n\n\nTotal goals market\n\nsource\n\n\n\npnl_total\n\n pnl_total (selection:numpy.ndarray, odds:numpy.ndarray,\n            obs_total:numpy.ndarray, total_line:numpy.ndarray)\n\nReturns the Asian total goal PnL.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nselection\nndarray\nThe amount invested on each selection; shape n x 7; last 2 are for over/under.\n\n\nodds\nndarray\nMarket odds in 1|X|2|A1|A2|O|U order; shape n x 7.\n\n\nobs_total\nndarray\nGame total goals; shape (n,).\n\n\ntotal_line\nndarray\nAsian total goal line could be integer, half or quarter line; shape (n,).\n\n\nReturns\nndarray\nAsian Total goal PnL.\n\n\n\n\nselection = (\n    np.array(\n        [\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5],\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.3, 0.0],\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.65],\n        ]\n    )\n    * 100.0\n)\n\ninfo = fixture.head(3)\n\n# Game odds.\nodds = info[\n    [\n        \"preGameOdds1\",\n        \"preGameOddsX\",\n        \"preGameOdds2\",\n        \"preGameAhHome\",\n        \"preGameAhAway\",\n        \"preGameOver\",\n        \"preGameUnder\",\n    ]\n].values\n\nobs_total = info.tgt_homeTeamGoals.values + info.tgt_awayTeamGoals.values\ntotal_line = info.preGameTotalLineId.values\n\n\npnl_total(selection, odds, obs_total, total_line)\n\narray([[ 22.75],\n       [ 27.9 ],\n       [-65.  ]])"
  },
  {
    "objectID": "Utils/pnl_calculator.html#pnl-wrapper",
    "href": "Utils/pnl_calculator.html#pnl-wrapper",
    "title": "1X2, Asian Handicap and Total Goal Profit",
    "section": "Pnl wrapper",
    "text": "Pnl wrapper\nThis function computes the total PnL:\n\nsource\n\npnl\n\n pnl (selection:numpy.ndarray, odds:numpy.ndarray, obs_gd:numpy.ndarray,\n      obs_total:numpy.ndarray, ah_line:numpy.ndarray,\n      total_line:numpy.ndarray)\n\nReturns the total PnL\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nselection\nndarray\nThe amount invested on each selection; shape n x 7.\n\n\nodds\nndarray\nMarket odds in 1|X|2|A1|A2|O|U order; shape n x 7.\n\n\nobs_gd\nndarray\nGame goal-difference; shape (n,).\n\n\nobs_total\nndarray\nGame total-goals; shape (n,).\n\n\nah_line\nndarray\nAsian line could be integer, half or quarter line; shape (n,).\n\n\ntotal_line\nndarray\nAsian total line could be integer, half or quarter line; shape (n,).\n\n\nReturns\nndarray\nTotal PnL.\n\n\n\n\nselection = (\n    np.array(\n        [\n            [0, 0.0, 0, 0.0, 0.3, 0.0, 0.0],  # Bet on asian 2.\n            [0.3, 0, 0, 0, 0, 0.0, 0.0],  # Bet on home.\n            [0, 0, 0.6, 0.0, 0, 0.0, 0.0],  # Bet on away.\n            [0, 0, 0.0, 0.6, 0, 0.0, 0.0],  # Bet on asian 1.\n            [0, 0.5, 0.0, 0.0, 0, 0.0, 0.0],  # Bet on X.\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5],  # Bet on Under.\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.3, 0.0],  # Bet on Over.\n            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  # Not bet.\n        ]\n    )\n    * 100.0\n)\n\ninfo = fixture.head(selection.shape[0])\n\n# Game odds.\nodds = info[\n    [\n        \"preGameOdds1\",\n        \"preGameOddsX\",\n        \"preGameOdds2\",\n        \"preGameAhHome\",\n        \"preGameAhAway\",\n        \"preGameOver\",\n        \"preGameUnder\",\n    ]\n].values\n\nobs_gd = info.tgt_gd.values\nah_line = info.preGameAhLineId.values\nobs_total = info.tgt_homeTeamGoals.values + info.tgt_awayTeamGoals.values\ntotal_line = info.preGameTotalLineId.values\n\npnl(\n    selection=selection,\n    odds=odds,\n    obs_gd=obs_gd,\n    ah_line=ah_line,\n    obs_total=obs_total,\n    total_line=total_line,\n)\n\narray([[-30. ],\n       [-30. ],\n       [ 85.2],\n       [  0. ],\n       [126.5],\n       [-50. ],\n       [ 29.1],\n       [  0. ]])"
  },
  {
    "objectID": "Environment/betting_env.html",
    "href": "Environment/betting_env.html",
    "title": "OpenAI Gym Env",
    "section": "",
    "text": "import plotly.io as pio\nUsing the config.toml credentials included in the main repository, we must first load games data stored in our MongoDb Cluster before testing our betting environment."
  },
  {
    "objectID": "Environment/betting_env.html#the-observation-class",
    "href": "Environment/betting_env.html#the-observation-class",
    "title": "OpenAI Gym Env",
    "section": "The Observation class",
    "text": "The Observation class\nWe provide here a simple class that stores our Environment observations.\n\nThe first format is a numpy array that encodes game information (game_optaId) and that will be passed to the computation framework.\nThe second format is a user-friendly output that can displayed to the screen.\n\n\nsource\n\nObservation\n\n Observation (game_id:int, game_date:datetime.datetime,\n              lineups:numpy.ndarray, lineups_ids:numpy.ndarray,\n              lineups_slots:numpy.ndarray,\n              lineups_formation:numpy.ndarray, teams_names:numpy.ndarray,\n              ra_teams_ids:numpy.ndarray, opta_teams_ids:numpy.ndarray,\n              betting_market:numpy.ndarray, ah_line:float,\n              total_line:float, shape:tuple)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ngame_id\nint\nOpta game Id.\n\n\ngame_date\ndatetime\nGame Date\n\n\nlineups\nndarray\nLineups(playerName:position), shape=(2,).\n\n\nlineups_ids\nndarray\nLineups opta Ids [list(11 home players Ids),list(11 away players Ids)], shape=(2,).\n\n\nlineups_slots\nndarray\nLineups slots [list(11 home positions Ids),list(11 away positions Ids)], shape=(2,).\n\n\nlineups_formation\nndarray\nLineups formations [home team formation, away team formation], shape=(2,).\n\n\nteams_names\nndarray\nTeam names (homeTeam name, awayteam name), shape=(2,).\n\n\nra_teams_ids\nndarray\nTeams Real-Analytics Ids [homeTeam Id, awayTeam Id], shape=(2,).\n\n\nopta_teams_ids\nndarray\nTeams opta Ids [homeTeam Id, awayTeam Id], shape=(2,).\n\n\nbetting_market\nndarray\nOdds [[1X2, Asian Handicap and total]], shape=(1,7).\n\n\nah_line\nfloat\nAsian handicap line.\n\n\ntotal_line\nfloat\nTotal goals line.\n\n\nshape\ntuple\nObservation shape = (1,).\n\n\n\nNext, we patch some useful methods to mimic the behaviour of a numpy array:\n\nsource\n\n\nObservation.astype\n\n Observation.astype (data_type:str)\n\nCast observation type.\n\n\n\n\nType\nDetails\n\n\n\n\ndata_type\nstr\nNew type to convert to.\n\n\nReturns\nObservation\n\n\n\n\n\nsource\n\n\nObservation.reshape\n\n Observation.reshape (new_shape:tuple)\n\nReshape observation.\n\n\n\n\nType\nDetails\n\n\n\n\nnew_shape\ntuple\nNew shape to transform the object in.\n\n\nReturns\nObservation\n\n\n\n\nFinally, we provide a use friendly formatting method:\n\nsource\n\n\nObservation.pretty\n\n Observation.pretty ()\n\nUser-friendly output\n\n# Get 1 example from the extracted data.\nfixture = fixtures.head(1)\n\n# Init an Observation.\nobservation = Observation(\n    game_id=fixture.game_optaId.values[0],  # Game Id.\n    game_date=fixture.gameDate.values[0],  # Game date.\n    lineups=fixture[[\"homeTeamLineup\", \"awayTeamLineup\"]].values[\n        0\n    ],  # Lineup (playerName:position).\n    lineups_ids=fixture[[\"homeTeamLineupIds\", \"awayTeamLineupIds\"]].values[\n        0\n    ],  # Lineups opta Ids [list(11 home players Ids),list(11 away players Ids)].\n    lineups_slots=fixture[[\"homeTeamLineupSlots\", \"awayTeamLineupSlots\"]].values[\n        0\n    ],  # Lineups slots [list(11 home positions Ids),list(11 away positions Ids)].\n    lineups_formation=fixture[[\"homeTeamFormation\", \"awayTeamFormation\"]].values[\n        0\n    ],  # Lineups formations [home team formation, away team formation].\n    teams_names=fixture[[\"homeTeamName\", \"awayTeamName\"]].values[\n        0\n    ],  # Team names (homeTeam name, awayteam name).\n    ra_teams_ids=fixture[[\"homeTeamId\", \"awayTeamId\"]].values[0],\n    opta_teams_ids=fixture[[\"homeTeam_optaId\", \"awayTeam_optaId\"]].values[\n        0\n    ],  # Teams opta Ids [homeTeam Id, awayTeam Id].\n    betting_market=fixture[\n        [\n            \"preGameOdds1\",\n            \"preGameOdds2\",\n            \"preGameOddsX\",\n            \"preGameAhHome\",\n            \"preGameAhAway\",\n            \"preGameOver\",\n            \"preGameUnder\",\n        ]\n    ].values,  # Odds [[1X2 and Asian Handicap]].\n    ah_line=fixture[\"preGameAhLineId\"].values[0],  # Asian handicap line.\n    total_line=fixture[\"preGameTotalLineId\"].values[0],\n    shape=(1,),  # Observation shape.\n)\n\n\n# Observation format : numpy encoder\nnum_observation = observation().numerical_observation\nnum_observation\n\narray([990998])\n\n\n\npretty_output = observation.pretty()\npretty_output\n\n\n\n\n\n  \n    \n      \n      gameId\n      gameDate\n      homeTeam\n      awayTeam\n      homeLineup\n      awayLineup\n      homeFormation\n      awayFormation\n      odds1\n      oddsX\n      odds2\n      oddsAhHome\n      oddsAhAway\n      oddsOver\n      oddsUnder\n      ahLine\n      totalLine\n    \n  \n  \n    \n      0\n      990998\n      2018-08-21 18:45:00\n      Derby County\n      Ipswich Town\n      {\"George Evans\": \"DMC\", \"David Nugent\": \"FW\", ...\n      {\"Jonas Knudsen\": \"DL\", \"Janoi Donacien\": \"DR\"...\n      4-3-3\n      4-1-4-1\n      2.05\n      3.85\n      3.0\n      1.96\n      1.96\n      1.99\n      1.91\n      -0.75\n      2.25"
  },
  {
    "objectID": "Environment/betting_env.html#betting-environment",
    "href": "Environment/betting_env.html#betting-environment",
    "title": "OpenAI Gym Env",
    "section": "Betting Environment",
    "text": "Betting Environment\n\nBetting assumptions\nReinforcement Learning is a branch of machine learning (ML) that focuses on the complex and all-encompassing issue of training a system to behave appropriately in a given situation. Only the value of the reward and observations made about the environment are used to drive learning. The generality of this model allows it to be used in a wide range of real-world contexts, from gaming to the improvement of sophisticated industrial procedures.\nIn this perspective, the environment and the agent are two crucial elements of the Reinforcement Learning (RL) problem. The environment is the Agent’s world where it exists and the Agent can engage in interactions with this environment by taking certain actions which cannot change the environment’s laws or dynamics.\nThe goal of this work is to develop an RL environment that simulates a betting strategy. The theory underlying this environment is quite straightforward:\n\nSelect a market and a selection (side) based on the available odds.\nDecide how much to invest (stake-size).\nCompute a profit and loss (PnL) based on the game outcome.\n\nThe real word situation can be quite complex with multiple markets available and different betting options. To keep things simple, the agent is only allowed to: - Place a small, medium, or a large bet. - Select at most one betting opportunity out of home, draw, or away for the 1x2 market, and home or away on the even Asian handicap or the Total (Over/Under) line. - The agent is only allowed to pick one size of bets and a unique selection to bet on (out of the 7 options available). - Games are presented to the agent as soon as the official lineup becomes available.\n\n\nGym environment\nBased on the betting assumptions discussed above, we will implement a custom OpenAI Gym environment. + An observation is an instance of the Observation class with the following information: - Game-identifier - Home and Away team lineup - Available odds for the 1x2, the even money Asian handicap and the even Total (Over/Under) markets. + The action space is discrete with size 22 which corresponds to one bet size (1 out of 3) in one of the available selection (1 out of 7). + The reward (the investment return), which can be positive or negative, is then calculated and the agent bank updated. + An episode terminates if i) no more games are available to bet on ii) the agent goes bankrupt.\n\nInitialize\nThe environment is initialized by extending the gym.Env base class:\n\nsource\n\n\n\nBettingEnv\n\n BettingEnv (game_info:pandas.core.frame.DataFrame,\n             odds_column_names:list=['preGameOdds1', 'preGameOdds2',\n             'preGameOddsX', 'preGameAhHome', 'preGameAhAway',\n             'preGameOver', 'preGameUnder'], starting_bank:float=100.0,\n             small_bet:float=0.05, medium_bet:float=0.2,\n             large_bet:float=0.7)\n\nOpenAI Gym class for football betting environments.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngame_info\nDataFrame\n\nGames with betting odds and other info.\n\n\nodds_column_names\nlist\n[‘preGameOdds1’, ‘preGameOdds2’, ‘preGameOddsX’, ‘preGameAhHome’, ‘preGameAhAway’, ‘preGameOver’, ‘preGameUnder’]\n\n\n\nstarting_bank\nfloat\n100.0\nStarting bank account.\n\n\nsmall_bet\nfloat\n0.05\nSmall bet proportion value.\n\n\nmedium_bet\nfloat\n0.2\nMedium bet proportion value.\n\n\nlarge_bet\nfloat\n0.7\nLarge bet proportion value.\n\n\nReturns\nNone\n\n\n\n\n\n\nGet an observation\n\nsource\n\n\n\nBettingEnv.get_observation\n\n BettingEnv.get_observation ()\n\nReturns the observation of the current step.\n\nReset the environment\n\nsource\n\n\n\nBettingEnv.reset\n\n BettingEnv.reset ()\n\nResets the state of the environment and returns an initial observation.\n\nThe step method\nA step in the environment executes the following: + Initialize the info collector. + Check the balance to decide whether the betting should continue or not. + If some money is available, the bet is executed (even if the money is shorter than the required amount) and the results computed. + The bet outcome (reward) is then computed and the agent’s balance and bank are updated. + Finally, we check if the episode is done by consulting if there are games left in the buffer.\n\nsource\n\n\n\nBettingEnv.step\n\n BettingEnv.step (action:int)\n\nRun one timestep of the environment’s dynamics. It accepts an action and returns a tuple (observation, reward, done, info)\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\naction\nint\nThe chosen action by the agent.\n\n\nReturns\ntyping.Tuple[main.Observation, float, bool, typing.Dict]\nReturns (observation, reward, done, info).\n\n\n\n\nsource\n\n\nBettingEnv.render\n\n BettingEnv.render ()\n\nUpdates the figure with the current step data."
  },
  {
    "objectID": "dataStrcuture/data_extractor.html",
    "href": "dataStrcuture/data_extractor.html",
    "title": "Data Extractor",
    "section": "",
    "text": "We provide a function that seeks to retrieve the list of games recorded in our gameFeatures MongoDb Collection and aggregate it with its additional features such as Lineups information (lineups Collection) and 1x2, Asian Handicap and Total odds (Odds collection).\n\nsource\n\n\n\n data_aggregator (limit:int=None)\n\nReturns and aggregates games information from multiple Db collections.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nlimit\nint\nNone\nNumber of rows to extract.\n\n\nReturns\nDataFrame\n\nMapped games.\n\n\n\n\nmongo_init(db_host=\"public_atlas\")\n\nx2 = data_aggregator(\n    limit=6,\n)\n\n\nx2[[\"gameId\", \n    \"preGameOdds1\", \"preGameOddsX\", \"preGameOdds2\", \n    \"preGameAhHome\", \"preGameAhAway\", \"preGameAhLineId\", \n    \"preGameOver\", \"preGameUnder\", \"preGameTotalLineId\",\n   \"tgt_gd\", \"tgt_outcome\", \"tgt_homeTeamGoals\", \"tgt_awayTeamGoals\"]]\n\n\n\n\nodds extraction: 0.17388653755187988\nht_features: 0.09948301315307617\nat features: 0.08382320404052734\n\n\n\n\n\n\n  \n    \n      \n      gameId\n      preGameOdds1\n      preGameOddsX\n      preGameOdds2\n      preGameAhHome\n      preGameAhAway\n      preGameAhLineId\n      preGameOver\n      preGameUnder\n      preGameTotalLineId\n      tgt_gd\n      tgt_outcome\n      tgt_homeTeamGoals\n      tgt_awayTeamGoals\n    \n  \n  \n    \n      0\n      174dba7291174b4dbbfa9ea12dd944bb45bdd8ed905524...\n      2.62\n      3.53\n      2.77\n      1.86\n      2.06\n      0.0\n      1.96\n      1.96\n      2.5\n      0\n      1.0\n      2\n      2"
  },
  {
    "objectID": "dataStrcuture/team_lineup.html",
    "href": "dataStrcuture/team_lineup.html",
    "title": "Teams Lineups",
    "section": "",
    "text": "The Player class contains the necassary information about the player reported on the team-sheet. If the player is starting the game, a more detailed class StartingPlayer will store further information about his position on the pitch and the formation the team is playing.\n\nsource\n\n\n\n StartingPlayer (*args, **kwargs)\n\nExtends the Player class with extra information about a Player starting the game\n\nsource\n\n\n\n\n Player (*args, **kwargs)\n\nStores main information about a player reported on the team sheet"
  },
  {
    "objectID": "dataStrcuture/team_lineup.html#the-lineup-document",
    "href": "dataStrcuture/team_lineup.html#the-lineup-document",
    "title": "Teams Lineups",
    "section": "The LineUp Document",
    "text": "The LineUp Document\nThe TeamSheet Class directly inherits from mongoengine.Document and contains a couple of embedded documents: * Starting is a a mongoengine.EmbeddedDocumentListField storing information about the players starting the game. * Bench is also a mongoengine.EmbeddedDocumentListField storing information about the players on the bech. * All these document all populated by Player objects.\n\nsource\n\nTeamSheet\n\n TeamSheet (*args, **values)\n\nStore the team-sheet information for a given game.\n\nfrom fastbet.config.mongo import mongo_init\n\n\n# Initialise connections.\nmongo_init(db_host=\"public_atlas\")\n\naston_villa_id = \"126905d14981e6b97912ad4fec354035ccef26cb8ec4e1cb20573c7b583b1c70\"\n\nlineup = TeamSheet.get_latest(\n    ra_team_id=aston_villa_id, date=datetime.datetime(2018, 8, 22, 19, 15, 0)\n)\n{x.name: x.position for x in lineup.starting}\n\n{'Glenn Whelan': 'DMR',\n 'Mile Jedinak': 'DCL',\n 'John McGinn': 'DML',\n 'Jonathan Kodjia': 'FW',\n 'Albert Adomah': 'ML',\n 'Ahmed Elmohamady': 'MR',\n 'James Chester': 'DCR',\n 'Axel Tuanzebe': 'DR',\n 'Alan Hutton': 'DL',\n 'Orjan Nyland': 'GK',\n 'Jack Grealish': 'AMC'}"
  },
  {
    "objectID": "dataStrcuture/odds.html",
    "href": "dataStrcuture/odds.html",
    "title": "Odds",
    "section": "",
    "text": "In this document we will define a data structure for Odds and We are mainly interested by 3 types of markets:\n\n1x2\nAsian-handicap\nOver/Under\n\n\nsource\n\n\n\n MarketOdds (*args, **values)\n\nStore the odds values\n\nfrom fastbet.config.mongo import mongo_init\n\n\n# Initialise connections.\nmongo_init(db_host=\"public_atlas\")\n\nra_game_id = \"174dba7291174b4dbbfa9ea12dd944bb45bdd8ed9055247ce85b0469dfcfb24e\"\nmarket = \"1x2\"\n\nodds_feats = MarketOdds.get_odds_features(\n    ra_game_id, market, date=datetime.datetime(2018, 8, 22, 18, 45, 0)\n)\nodds_feats\n\n\n\n\n\n  \n    \n      \n      id\n      game_id\n      game_opta_id\n      game_date\n      competition_id\n      competition_opta_id\n      season_id\n      home_team_id\n      away_team_id\n      bookmaker_id\n      ...\n      market_type\n      line_id\n      received_at\n      odds1\n      odds2\n      oddsX\n      overround\n      proba1\n      proba2\n      probaX\n    \n  \n  \n    \n      0\n      174dba7291174b4dbbfa9ea12dd944bb45bdd8ed905524...\n      174dba7291174b4dbbfa9ea12dd944bb45bdd8ed905524...\n      990997\n      2018-08-22 18:45:00\n      2938f6103c8ba81a5c9a2822113eab2b2bcd4f175d655f...\n      10\n      2018\n      126905d14981e6b97912ad4fec354035ccef26cb8ec4e1...\n      419088133137a53bfdb1b7e2e682d223d33a6fa075bbfe...\n      83\n      ...\n      1x2\n      None\n      2018-08-22 18:44:45.957\n      2.62\n      2.77\n      3.53\n      0.025976\n      0.372016\n      0.351871\n      0.276114\n    \n  \n\n1 rows × 22 columns"
  },
  {
    "objectID": "dataStrcuture/game_features.html",
    "href": "dataStrcuture/game_features.html",
    "title": "Games Features",
    "section": "",
    "text": "These features are computed at the game level and contains: + metadata: general information about game date, team identity, competition, … + stadium information: coordinates, ssurface, capacity, … + condition day time, attendane, meteo, … + dominace: The head to head record between the home and away team\nThe document also contains tagret information i.e, the different prediction targets such as the match-outcome, score, goal-difference,… They are identified with the tgt_ prefix.\n\nsource\n\n\n\n GameFeatures (*args, **values)\n\nStore the game-features for a given game identified by its id\n\nfrom fastbet.config.mongo import mongo_init\n\n\n# Initialise connections.\nmongo_init(db_host=\"public_atlas\")\n\n# Get all fixtures.\nfixtures = GameFeatures.get_all_games(limit=5)\n\n# Fixtures.\n\nfixtures = pd.DataFrame(fixtures.as_pymongo())\nfixtures.head()\n\n\n\n\n\n  \n    \n      \n      _id\n      game_optaId\n      gameDate\n      seasonId\n      competition_optaId\n      time_period\n      tgt_half_gd\n      tgt_gd\n      tgt_homeTeamGoals\n      tgt_awayTeamGoals\n      ...\n      homeTeamManagerDays\n      awayTeamManagerId\n      awayTeamManagerName\n      awayTeamManagerDays\n      homeTeamDominance\n      awayTeamDominance\n      competitionId\n      gameId\n      homeTeamId\n      awayTeamId\n    \n  \n  \n    \n      0\n      c0c48eee0b1a42e0d84cb0a947fe2c64f9e1aa7015922f...\n      990998\n      2018-08-21 18:45:00\n      2018\n      10\n      2018_34\n      0\n      2\n      2\n      0\n      ...\n      51\n      37257695f892331fe6751da4b1ad9963fb3c7687386bd7...\n      Paul Hurst\n      51\n      0.500000\n      0.500000\n      2938f6103c8ba81a5c9a2822113eab2b2bcd4f175d655f...\n      c0c48eee0b1a42e0d84cb0a947fe2c64f9e1aa7015922f...\n      bc9d5de208258f2f95282c59e9551310be9d319ebc6e4e...\n      4a625f945d8f58984be0aa7b2ac6409a23ed9cf48e4260...\n    \n    \n      1\n      3a604f5616b39eb17fc8d1eed07d5248e387bf400294b2...\n      991000\n      2018-08-21 18:45:00\n      2018\n      10\n      2018_34\n      -1\n      -3\n      0\n      3\n      ...\n      51\n      4eb3ad93d4e0f3bbd1839b367ec794ad3d3ec904da107b...\n      Lee Johnson\n      927\n      0.444444\n      0.444444\n      2938f6103c8ba81a5c9a2822113eab2b2bcd4f175d655f...\n      3a604f5616b39eb17fc8d1eed07d5248e387bf400294b2...\n      e2bfbb5453a7853e049b9434db74d4d06b8c5560ff7cf9...\n      d6fe4a4ffbf1e1a0ae9d4bbed16e94042d9bf01e57eb55...\n    \n    \n      2\n      58b1242154c8055252582229abfc4680460278834c4433...\n      991001\n      2018-08-21 18:45:00\n      2018\n      10\n      2018_34\n      -1\n      -1\n      2\n      3\n      ...\n      630\n      7138490bd99d55d01e6969fa9ef3b13abd25e01ad89b86...\n      Nigel Adkins\n      257\n      0.500000\n      0.500000\n      2938f6103c8ba81a5c9a2822113eab2b2bcd4f175d655f...\n      58b1242154c8055252582229abfc4680460278834c4433...\n      58301066042bbdf19de8fe7d41afc53626b5aa79034712...\n      bbb63e4ea54b0d60b48a1f8440254d7e656dfbfcbef825...\n    \n    \n      3\n      d0cc49c3230e300b529b270951b3b70b3224481add8354...\n      991007\n      2018-08-21 18:45:00\n      2018\n      10\n      2018_34\n      0\n      0\n      2\n      2\n      ...\n      51\n      e7b70dea7986e57aabb62e50045a5063d659aaa536957b...\n      Marcelo Bielsa\n      67\n      0.500000\n      0.500000\n      2938f6103c8ba81a5c9a2822113eab2b2bcd4f175d655f...\n      d0cc49c3230e300b529b270951b3b70b3224481add8354...\n      9ca1f9a87934693b07890de4b4528b0f3ae4065a67ec38...\n      38ca605bcd29a5a37697ca66e533ae817ced71b6bf275c...\n    \n    \n      4\n      174dba7291174b4dbbfa9ea12dd944bb45bdd8ed905524...\n      990997\n      2018-08-22 18:45:00\n      2018\n      10\n      2018_34\n      0\n      0\n      2\n      2\n      ...\n      679\n      4d2e946dcfa0beaf190f55a472e83a3579ce6700a933e7...\n      Dean Smith\n      995\n      0.166667\n      0.666667\n      2938f6103c8ba81a5c9a2822113eab2b2bcd4f175d655f...\n      174dba7291174b4dbbfa9ea12dd944bb45bdd8ed905524...\n      126905d14981e6b97912ad4fec354035ccef26cb8ec4e1...\n      419088133137a53bfdb1b7e2e682d223d33a6fa075bbfe...\n    \n  \n\n5 rows × 41 columns"
  }
]